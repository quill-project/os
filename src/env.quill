
mod os::env

ext fun is_windows() -> Bool 
    = "#include(<quill_os.h>) return QUILL_ENV_IS_WINDOWS;"
ext fun is_unix() -> Bool
    = "#include(<quill_os.h>) return QUILL_ENV_IS_UNIX;"
ext fun is_osx() -> Bool 
    = "#include(<quill_os.h>) return QUILL_ENV_IS_OSX;"
ext fun is_ios() -> Bool 
    = "#include(<quill_os.h>) return QUILL_ENV_IS_IOS;"
ext fun is_linux() -> Bool 
    = "#include(<quill_os.h>) return QUILL_ENV_IS_LINUX;"
ext fun is_android() -> Bool 
    = "#include(<quill_os.h>) return QUILL_ENV_IS_ANDROID;"

pub val IS_WINDOWS: Bool = is_windows()
pub val IS_UNIX: Bool = is_unix()
pub val IS_OSX: Bool = is_osx()
pub val IS_IOS: Bool = is_ios()
pub val IS_LINUX: Bool = is_linux()
pub val IS_ANDROID: Bool = is_android()


pub ext fun args() -> List[String] 
    = "return quill_program_args;"


ext fun raw_var_entries() -> List[String] = "
    #include(<quill_os.h>)
    quill_os_init_env_lock();
    #type(List[String]) entries = #fun(List::empty[String])();
    #ifdef _WIN32
        quill_mutex_lock(&quill_os_env_lock);
        LPWCH entries_w = GetEnvironmentStringsW();
        quill_mutex_unlock(&quill_os_env_lock);
        if(entries_w == NULL) {
            return entries;
        }
        LPWCH entry_w = entries_w;
        while(*entry_w != L'\0') {
            DWORD entry_w_l = wcslen(entry_w);
            QUILL_OS_STRING_FROM_WIDE(entry_w, entry_w_l, entry, entries)
            #fun(List::push[String])(entries, entry);
            #rc_dec(String)(entry);
            entry_w += entry_w_l + 1;
        }
        FreeEnvironmentStringsW(entries_w);
    #else
        quill_mutex_lock(&quill_os_env_lock);
        for(char **entry_nt = environ; *entry_nt != NULL; entry_nt++) {
            quill_string_t entry = quill_string_from_temp_cstr(*entry_nt);
            #fun(List::push[String])(entries, entry);
            #rc_dec(String)(entry);
        }
        quill_mutex_unlock(&quill_os_env_lock);
    #endif
    return entries;
"

pub fun vars() -> mut Sequence[String] = raw_var_entries()
    |> values()
    |> map[String, String](|e| e |> split("=") |> next() |> unwrap_or(""))
    |> filter(|k| !(k |> is_empty()))

fun make_some[T](value: T) -> Option[T] { 
    return Option::Some(value) 
}
fun make_none[T]() -> Option[T] { return Option::None }

pub ext fun get_var(name: String) -> Option[String] = "
    #include(<quill_os.h>)
    quill_os_init_env_lock();
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(name), name_w, #fun(make_none[String])())
        quill_mutex_lock(&quill_os_env_lock);
        DWORD value_w_bl = GetEnvironmentVariableW(name_w, NULL, 0);
        if(value_w_bl == 0) {
            quill_mutex_unlock(&quill_os_env_lock);
            return #fun(make_none[String])();
        }
        wchar_t value_w[value_w_bl];
        DWORD value_w_rl = GetEnvironmentVariableW(name_w, value_w, value_w_bl);
        quill_mutex_unlock(&quill_os_env_lock);
        if(value_w_rl == 0 || value_w_rl >= value_w_bl) {
            return #fun(make_none[String])();
        }
        QUILL_OS_STRING_FROM_WIDE(
            value_w, value_w_bl - 1, value, #fun(make_none[String])()
        )
        return #fun(make_some[String])(value);
    #else
        QUILL_OS_STRING_AS_NT(#var(name), name_nt)
        quill_mutex_lock(&quill_os_env_lock);
        const char *value_nt = getenv(name_nt);
        if(value_nt == NULL) {
            quill_mutex_unlock(&quill_os_env_lock);
            return #fun(make_none[String])();
        }
        quill_string_t value = quill_string_from_temp_cstr(value_nt);
        quill_mutex_unlock(&quill_os_env_lock);
        return #fun(make_some[String])(value);
    #endif
"

pub ext fun set_var(value: String, name: String) = "
    #include(<quill_os.h>)
    quill_os_init_env_lock();
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(value), value_w, QUILL_UNIT)
        QUILL_OS_STRING_AS_WIDE(#var(name), name_w, QUILL_UNIT)
        quill_mutex_lock(&quill_os_env_lock);
        SetEnvironmentVariableW(name_w, value_w);
        quill_mutex_unlock(&quill_os_env_lock);
    #else
        QUILL_OS_STRING_AS_NT(#var(value), value_nt)
        QUILL_OS_STRING_AS_NT(#var(name), name_nt)
        quill_mutex_lock(&quill_os_env_lock);
        setenv(name_nt, value_nt, 1); // '1' = overwrite if exists
        quill_mutex_unlock(&quill_os_env_lock);
    #endif
"