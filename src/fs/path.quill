
mod os::fs::path

ext fun get_file_sep() -> String = "
    #ifdef _WIN32
        return quill_string_from_static_cstr(\"\\\\\");
    #else
        return quill_string_from_static_cstr(\"/\");
    #endif
"
// The symbol that is most commonly used to divide a file path.
// Defined as '\' on Windows and '/' on UNIX-like systems.
pub val FILE_SEP: String = get_file_sep()

ext fun get_path_sep() -> String = "
    #ifdef _WIN32
        return quill_string_from_static_cstr(\";\");
    #else
        return quill_string_from_static_cstr(\":\");
    #endif
"
// The symbol that is most commonly used to divide a list of file paths.
// Defined as ';' on Windows and ':' on UNIX-like systems.
pub val PATH_SEP: String = get_path_sep()

// Returns the given path string with any file separators at the start (low end)
// of the string removed.
// Both the file separator of the current system ('FILE_SEP') and '/' are removed.
pub fun trim_begin(path: String) -> String {
    val new_start: Int = path
        |> indices()
        |> find(|i| {
            val c: String = path |> at(i)
            return c != FILE_SEP && c != "/"
        })
        |> unwrap_or(path |> length())
    return path |> slice_from(new_start)
}

// Returns the given path string with any file separators at the end (high end)
// of the string removed.
// Both the file separator of the current system ('FILE_SEP') and '/' are removed.
pub fun trim_end(path: String) -> String {
    val new_last_idx: Int = path
        |> indices_rev()
        |> find(|i| {
            val c: String = path |> at(i)
            return c != FILE_SEP && c != "/"
        })
        |> unwrap_or(-1)
    return path |> slice_to(new_last_idx + 1)
}

// Combines the two given path strings into a single path by joining them
// with only a single file separator between them.
pub fun join(low: String, high: String) -> String
    = trim_end(low)
    |> concat(FILE_SEP)
    |> concat(trim_begin(high))

// Sets the given path as the current working directory.
// Requires the given path to be an accessible, existing directory.
// Returns a value indicating success or an error.
pub ext fun set_cwd(path: String) -> Result[Unit, os::Error] = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[String])(EINVAL))
        if(!SetCurrentDirectoryW(path_w)) {
            return #fun(os::make_err[Unit])(quill_os_win_to_errno(GetLastError()));
        }
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        if(chdir(path_nt) != 0) {
            return #fun(os::make_err[Unit])((quill_int_t) errno);
        }
    #endif
    return #fun(os::make_ok[Unit])(QUILL_UNIT);
"

// Returns the current working directory as an absolute path.
// Requires the current working directory to refer to an existing directory.
pub fun get_cwd() -> String 
    = canonicalize(".") 
    |> unwrap_or_else(|e| "Unable to get current working directory: _"
        |> fmt(e |> os::Error::as_string())
        |> panic()
    )

// Attempts to convert the given file path to an absolute file path based on
// the current working directory.
// Requires that a file exists at the specified path.
// Returns either the absolute equivalent of the given path or an error.
// Note that on Windows, this function will not resolve symbolic links.
pub ext fun canonicalize(path: String) -> Result[String, os::Error] = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[String])(EINVAL))
        DWORD res_w_length_chars_nt = GetFullPathNameW(path_w, 0, NULL, NULL);
        if(res_w_length_chars_nt == 0) {
            return #fun(os::make_err[String])(quill_os_win_to_errno(GetLastError()));
        }
        wchar_t res_w[res_w_length_chars_nt];
        if(GetFullPathNameW(path_w, res_w_length_chars_nt, res_w, NULL) == 0) {
            return #fun(os::make_err[String])(quill_os_win_to_errno(GetLastError()));
        }
        if(GetFileAttributesW(res_w) == INVALID_FILE_ATTRIBUTES) {
            return #fun(os::make_err[String])(quill_os_win_to_errno(GetLastError()));
        }
        QUILL_OS_STRING_FROM_WIDE(
            res_w, res_w_length_chars_nt - 1, res, #fun(os::make_err[String])(EINVAL)
        )
        return #fun(os::make_ok[String])(res);
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        char *res_nt = realpath(path_nt, NULL);
        if(res_nt == NULL) {
            return #fun(os::make_err[String])((quill_int_t) errno);
        }
        quill_string_t res = quill_string_from_temp_cstr(res_nt);
        free(res_nt);
        return #fun(os::make_ok[String])(res);
    #endif
"