
mod os::fs

// Determines if a file of any type exists at the given path.
// To specifically check for a file (and not a directory), use 'is_file'.
// To specifically check for a directory, use 'is_dir'.
pub ext fun file_exists(path: String) -> Bool = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, QUILL_FALSE)
        return GetFileAttributesW(path_w) != INVALID_FILE_ATTRIBUTES;
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        struct stat st;
        return stat(path_nt, &st) != -1;
    #endif
"

// Attempts to determine if the file at the given path is a file and not a directory.
// Only returns true if the path exists and refers to a file and not a directory.
// Returns false in all other cases.
// To determine if a file of any type exists at a given path, use 'file_exists'.
pub ext fun is_file(path: String) -> Bool = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, QUILL_FALSE)
        DWORD attr = GetFileAttributesW(path_w);
        if(attr == INVALID_FILE_ATTRIBUTES) { return QUILL_FALSE; }
        return (attr & FILE_ATTRIBUTE_DIRECTORY) == 0;
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        struct stat st;
        if(stat(path_nt, &st) == -1) { return QUILL_FALSE; }
        return S_ISREG(st.st_mode);
    #endif
"

// Attempts to write the given contents to a file encoded in UTF-8 at the given path.
// If the file exists, it is overwritten with the new contents.
// If the file does not yet exist, a new one is created.
// Returns either a value indicating success or an error.
pub ext fun write_file(content: String, path: String) -> Result[Unit, os::Error] = "
    #include(<quill_os.h>)
    FILE *f = NULL;
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[Unit])(EINVAL))
        f = _wfopen(path_w, L\"wb\");
    #else 
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        f = fopen(path_nt, \"wb\");
    #endif
    if(f == NULL) {
        return #fun(os::make_err[Unit])((quill_int_t) errno);
    }
    size_t written_bytes = fwrite(
        #var(content).data, sizeof(uint8_t), #var(content).length_bytes, f
    );
    if(written_bytes != (size_t) #var(content).length_bytes) {
        quill_int_t e = (quill_int_t) errno;
        fclose(f);
        return #fun(os::make_err[Unit])(e);
    }
    if(fclose(f) != 0) {
        return #fun(os::make_err[Unit])((quill_int_t) errno);
    }
    return #fun(os::make_ok[Unit])(QUILL_UNIT);
"

// Attempts to read the contents of the file encoded in UTF-8 at the given path.
// Returns either the contents of the file or an error.
pub ext fun read_file(path: String) -> Result[String, os::Error] = "
    #include(<quill_os.h>)
    FILE *f = NULL;
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[String])(EINVAL))
        f = _wfopen(path_w, L\"r\");
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        f = fopen(path_nt, \"r\");
    #endif
    if(f == NULL) {
        return #fun(os::make_err[String])((quill_int_t) errno);
    }
    if(fseek(f, 0, SEEK_END) != 0) {
        quill_int_t e = (quill_int_t) errno;
        fclose(f);
        return #fun(os::make_err[String])(e);
    }
    quill_string_t res;
    res.length_bytes = (quill_int_t) ftell(f);
    if(res.length_bytes < 0) {
        return #fun(os::make_err[String])((quill_int_t) errno);
    }
    res.length_points = 0;
    res.alloc = quill_malloc(res.length_bytes, NULL);
    res.data = res.alloc->data;
    rewind(f);
    quill_int_t read_bytes = fread(
        res.alloc->data, 
        1, (size_t) res.length_bytes, 
        f
    );
    if(read_bytes < res.length_bytes) {
        res.length_bytes = read_bytes;
    } else if(read_bytes > res.length_bytes) {
        quill_int_t e = (quill_int_t) errno;
        quill_rc_dec(res.alloc);
        fclose(f);
        return #fun(os::make_err[String])(e);
    }
    if(fclose(f) != 0) {
        quill_int_t e = (quill_int_t) errno;
        quill_rc_dec(res.alloc);
        return #fun(os::make_err[String])(e);
    }
    for(quill_int_t o = 0; o < res.length_bytes; res.length_points += 1) {
        o += quill_point_decode_length(res.data[o]);
    }
    return #fun(os::make_ok[String])(res);
"

// Deletes the directory at the given path only if it exists and is empty.
// Returns either a value indicating success or an error.
pub ext fun delete_file(path: String) -> Result[Unit, os::Error] = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[Unit])(EINVAL))
        if(_wremove(path_w) != 0) {
            return #fun(os::make_err[Unit])((quill_int_t) errno);
        }
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        if(remove(path_nt) != 0) {
            return #fun(os::make_err[Unit])((quill_int_t) errno);
        }
    #endif
    return #fun(os::make_ok[Unit])(QUILL_UNIT);
"

// Attempts to determine if the file at the given path is a directory.
// Only returns true if the path exists and refers to a directory.
// Returns false in all other cases.
pub ext fun is_dir(path: String) -> Bool = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, QUILL_FALSE)
        DWORD attr = GetFileAttributesW(path_w);
        if(attr == INVALID_FILE_ATTRIBUTES) { return QUILL_FALSE; }
        return (attr & FILE_ATTRIBUTE_DIRECTORY) != 0;
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        struct stat st;
        if(stat(path_nt, &st) == -1) { return QUILL_FALSE; }
        return S_ISDIR(st.st_mode);
    #endif
"

// Attempts to create a new directory at the given path.
// Returns either a value indicating success or an error.
// If the directory already exists, the function results in an error.
pub ext fun create_dir(path: String) -> Result[Unit, os::Error] = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[Unit])(EINVAL))
        if(!CreateDirectoryW(path_w, NULL)) {
            return #fun(os::make_err[Unit])(quill_os_win_to_errno(GetLastError()));
        }
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        struct stat st;
        const mode_t dir_mode = S_IRUSR | S_IWUSR | S_IXUSR
            | S_IRGRP | S_IXGRP | S_IROTH | S_IXOTH;
        if(mkdir(path_nt, dir_mode) != 0) {
            return #fun(os::make_err[Unit])((quill_int_t) errno);
        }
    #endif
    return #fun(os::make_ok[Unit])(QUILL_UNIT);
"

// Attempts to read the contents of a directory a the given apth.
// Returns either the contents of the directory
// (as a list of the names of the files in the directory)
// or an error.
pub ext fun read_dir(path: String) -> Result[List[String], os::Error] = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        // convert the path to UTF-16 and add the search pattern at the end
        char last_char = #var(path).data[#var(path).length_bytes - 1];
        quill_bool_t requires_sep = #var(path).length_points > 0
            && last_char != '\\\\' 
            && last_char != '/';
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[List[String]])(EINVAL))
        int pat_w_length = path_w_length + (requires_sep? 2 : 1);
        wchar_t pat_w[pat_w_length + 1];
        memcpy(pat_w, path_w, sizeof(wchar_t) * path_w_length);
        if(requires_sep) {
            pat_w[path_w_length + 0] = L'\\\\';
            pat_w[path_w_length + 1] = L'*';
        } else {
            pat_w[path_w_length + 0] = L'*';
        }
        pat_w[pat_w_length] = '\\0';
        // actually scan the directory
        WIN32_FIND_DATAW entry;
        HANDLE d = FindFirstFileW(pat_w, &entry);
        if(d == INVALID_HANDLE_VALUE) {
            return #fun(os::make_err[List[String]])(
                quill_os_win_to_errno(GetLastError())
            );
        }
        #type(List[String]) res = #fun(List::empty[String])();
        do {
            if(wcscmp(entry.cFileName, L\".\") == 0) { continue; }
            if(wcscmp(entry.cFileName, L\"..\") == 0) { continue; }
            QUILL_OS_STRING_FROM_WIDE(
                entry.cFileName, wcslen(entry.cFileName),
                name, #fun(os::make_err[List[String]])(EINVAL)
            )
            #fun(List::push[String])(res, name);
        } while(FindNextFileW(d, &entry));
        FindClose(d);
        return #fun(os::make_ok[List[String]])(res);
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        DIR *d = opendir(path_nt);
        if(d == NULL) {
            return #fun(os::make_err[List[String]])((quill_int_t) errno);
        }
        #type(List[String]) res = #fun(List::empty[String])();
        for(;;) {
            struct dirent *entry = readdir(d);
            if(entry == NULL) { break; }
            if(strcmp(entry->d_name, \".\") == 0) { continue; }
            if(strcmp(entry->d_name, \"..\") == 0) { continue; }
            quill_string_t name = quill_string_from_temp_cstr(entry->d_name);
            #fun(List::push[String])(res, name);
        }
        if(closedir(d) != 0) {
            quill_int_t e = (quill_int_t) errno;
            quill_rc_dec(res);
            return #fun(os::make_err[List[String]])(e);
        }
        return #fun(os::make_ok[List[String]])(res);
    #endif
"

// Deletes the directory at the given path only if it exists and is empty.
// Returns either a value indicating success or an error.
pub ext fun delete_dir(path: String) -> Result[Unit, os::Error] = "
    #include(<quill_os.h>)
    #ifdef _WIN32
        QUILL_OS_STRING_AS_WIDE(#var(path), path_w, #fun(os::make_err[Unit])(EINVAL))
        if(_wrmdir(path_w) != 0) {
            return #fun(os::make_err[Unit])((quill_int_t) errno);
        }
    #else
        QUILL_OS_STRING_AS_NT(#var(path), path_nt)
        if(rmdir(path_nt) != 0) {
            return #fun(os::make_err[Unit])((quill_int_t) errno);
        }
    #endif
    return #fun(os::make_ok[Unit])(QUILL_UNIT);
"